Определения типов: Определил тип адреса и использовал его в типе пользователя.
Обработка значений NULL и Undefine: компонент UserInfo теперь обрабатывает случаи, когда значение user равно NULL или не определено.
Обработка ошибок: добавлена ​​обработка ошибок в функции полученияRandomUser.
Использовать React.FC: использовать React.FC для функциональных компонентов для улучшения вывода типов.
Необязательное связывание и реквизиты по умолчанию: использовано необязательное связывание для обработки потенциальных нулевых состояний. Компонент UserInfo отображает сообщение, когда информация о пользователе отсутствует.

this is our code

import React, { useState } from "react";

const URL = "https://jsonplaceholder.typicode.com/users";

type Address = {
  street: string;
  suite: string;
  city: string;
  zipcode: string;
  geo: {
    lat: string;
    lng: string;
  };
};

type Company = {
  bs: string;
  catchPhrase: string;
  name: string;
};

type User = {
  id: number;
  email: string;
  name: string;
  phone: string;
  username: string;
  website: string;
  company: Company;
  address: Address;
};

interface IButtonProps {
  onClick: React.MouseEventHandler<HTMLButtonElement>;
}

const Button: React.FC<IButtonProps> = ({ onClick }) => {
  return (
    <button type="button" onClick={onClick}>
      Get Random User
    </button>
  );
};

interface IUserInfoProps {
  user?: User | null;
}

const UserInfo: React.FC<IUserInfoProps> = ({ user }) => {
  if (!user) {
    return <p>No user information available.</p>;
  }

  return (
    <table>
      <thead>
        <tr>
          <th>Username</th>
          <th>Phone number</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>{user.name}</td>
          <td>{user.phone}</td>
        </tr>
      </tbody>
    </table>
  );
};

const App: React.FC = () => {
  const [item, setItem] = useState<User | null>(null);
  const [error, setError] = useState<string | null>(null);

  const receiveRandomUser = async () => {
    try {
      const id = Math.floor(Math.random() * 10) + 1;
      const response = await fetch(`${URL}/${id}`);
      if (!response.ok) {
        throw new Error(`Error: ${response.statusText}`);
      }
      const _user = (await response.json()) as User;
      setItem(_user);
      setError(null);
    } catch (error: any) {
      setError(error.message);
      setItem(null);
    }
  };

  const handleButtonClick: React.MouseEventHandler<HTMLButtonElement> = (
    event
  ) => {
    event.stopPropagation();
    receiveRandomUser();
  };

  return (
    <div>
      <header>Get a Random User</header>
      <Button onClick={handleButtonClick} />
      {error ? <p>{error}</p> : <UserInfo user={item} />}
    </div>
  );
};

export default App;
